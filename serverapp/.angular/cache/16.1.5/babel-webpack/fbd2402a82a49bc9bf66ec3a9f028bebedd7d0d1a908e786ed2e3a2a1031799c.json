{"ast":null,"code":"import { Observable, catchError, tap, throwError } from 'rxjs';\nimport { Status } from '../enum/status.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServerService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n    this.server$ = this.http.get(`${this.apiUrl}/server/list`).pipe(tap(console.log), catchError(this.handleError));\n    this.save$ = server => this.http.post(`${this.apiUrl}/server/save`, server).pipe(tap(console.log), catchError(this.handleError));\n    this.ping$ = ipAddress => this.http.get(`${this.apiUrl}/server/save/${ipAddress}`).pipe(tap(console.log), catchError(this.handleError));\n    this.filter$ = (status, response) => new Observable(suscriber => {\n      console.log(response);\n      suscriber.next(status === Status.ALL ? {\n        ...response,\n        message: `Servers filtered by ${status} status`\n      } : {\n        ...response,\n        message: \"\"\n        // .filter(server => server.status === status).length > 0 ? `Servers filtered by \n        // ${status === Status.SERVER_UP ? `SERVER UP` \n        // : 'SERVER DOWN'} status` : `No servers of ${status} found`,\n        // data: { servers: response.data.servers\n        //   .filter(server => server.status === status) }\n      });\n\n      suscriber.complete();\n    }).pipe(tap(console.log), catchError(this.handleError));\n    this.delete$ = serverId => this.http.delete(`${this.apiUrl}/server/delete/${serverId}`).pipe(tap(console.log), catchError(this.handleError));\n  }\n  handleError(error) {\n    console.log(error);\n    return throwError('An error occurred - Error code: ${error.status}');\n  }\n}\nServerService.ɵfac = function ServerService_Factory(t) {\n  return new (t || ServerService)(i0.ɵɵinject(i1.HttpClient));\n};\nServerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServerService,\n  factory: ServerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Observable","catchError","tap","throwError","Status","ServerService","constructor","http","apiUrl","server$","get","pipe","console","log","handleError","save$","server","post","ping$","ipAddress","filter$","status","response","suscriber","next","ALL","message","complete","delete$","serverId","delete","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Works\\Spring Boot\\serverapp\\src\\app\\service\\server.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CustomResponse } from '../interface/custom-response';\nimport { Observable, catchError, tap, throwError } from 'rxjs';\nimport { Server } from '../interface/server';\nimport { Status } from '../enum/status.enum';\n\n@Injectable({ providedIn: 'root'})\nexport class ServerService {\n\n  private readonly apiUrl = 'http://localhost:8080';\n\n  constructor(private http:HttpClient) { }\n\n  server$ = <Observable<CustomResponse>>\n  this.http.get<CustomResponse>(`${this.apiUrl}/server/list`)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n  save$ = (server: Server) => <Observable<CustomResponse>>\n  this.http.post<CustomResponse>(`${this.apiUrl}/server/save`, server)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n  ping$ = (ipAddress: string) => <Observable<CustomResponse>>\n  this.http.get<CustomResponse>(`${this.apiUrl}/server/save/${ipAddress}`)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );  \n\n  filter$ = (status: Status, response: CustomResponse) => <Observable<CustomResponse>>\n    new Observable<CustomResponse>(\n      suscriber => {\n        console.log(response);\n        suscriber.next(\n          status === Status.ALL ? { ...response, message: `Servers filtered by ${status} status` } :\n          {\n            ...response,\n            message: \"\"\n            // .filter(server => server.status === status).length > 0 ? `Servers filtered by \n            // ${status === Status.SERVER_UP ? `SERVER UP` \n            // : 'SERVER DOWN'} status` : `No servers of ${status} found`,\n            // data: { servers: response.data.servers\n            //   .filter(server => server.status === status) }\n          }\n        );\n        suscriber.complete();\n      }\n    )\n    .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n  delete$ = (serverId: number) => <Observable<CustomResponse>>\n  this.http.delete<CustomResponse>(`${this.apiUrl}/server/delete/${serverId}`)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    console.log(error)\n    return throwError('An error occurred - Error code: ${error.status}');\n  }\n\n}\n\n"],"mappings":"AAGA,SAASA,UAAU,EAAEC,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AAE9D,SAASC,MAAM,QAAQ,qBAAqB;;;AAG5C,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,MAAM,GAAG,uBAAuB;IAIjD,KAAAC,OAAO,GACP,IAAI,CAACF,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,cAAc,CAAC,CAC1DG,IAAI,CACHT,GAAG,CAACU,OAAO,CAACC,GAAG,CAAC,EAChBZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;IAED,KAAAC,KAAK,GAAIC,MAAc,IACvB,IAAI,CAACT,IAAI,CAACU,IAAI,CAAiB,GAAG,IAAI,CAACT,MAAM,cAAc,EAAEQ,MAAM,CAAC,CACnEL,IAAI,CACHT,GAAG,CAACU,OAAO,CAACC,GAAG,CAAC,EAChBZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;IAED,KAAAI,KAAK,GAAIC,SAAiB,IAC1B,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,gBAAgBW,SAAS,EAAE,CAAC,CACvER,IAAI,CACHT,GAAG,CAACU,OAAO,CAACC,GAAG,CAAC,EAChBZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;IAED,KAAAM,OAAO,GAAG,CAACC,MAAc,EAAEC,QAAwB,KACjD,IAAItB,UAAU,CACZuB,SAAS,IAAG;MACVX,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC;MACrBC,SAAS,CAACC,IAAI,CACZH,MAAM,KAAKjB,MAAM,CAACqB,GAAG,GAAG;QAAE,GAAGH,QAAQ;QAAEI,OAAO,EAAE,uBAAuBL,MAAM;MAAS,CAAE,GACxF;QACE,GAAGC,QAAQ;QACXI,OAAO,EAAE;QACT;QACA;QACA;QACA;QACA;OACD,CACF;;MACDH,SAAS,CAACI,QAAQ,EAAE;IACtB,CAAC,CACF,CACAhB,IAAI,CACLT,GAAG,CAACU,OAAO,CAACC,GAAG,CAAC,EAChBZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;IAED,KAAAc,OAAO,GAAIC,QAAgB,IAC3B,IAAI,CAACtB,IAAI,CAACuB,MAAM,CAAiB,GAAG,IAAI,CAACtB,MAAM,kBAAkBqB,QAAQ,EAAE,CAAC,CAC3ElB,IAAI,CACHT,GAAG,CAACU,OAAO,CAACC,GAAG,CAAC,EAChBZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EApDsC;EAsD/BA,WAAWA,CAACiB,KAAwB;IAC1CnB,OAAO,CAACC,GAAG,CAACkB,KAAK,CAAC;IAClB,OAAO5B,UAAU,CAAC,iDAAiD,CAAC;EACtE;;AA7DWE,aAAa,C;mBAAbA,aAAa,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAb9B,aAAa,C;SAAbA,aAAa;EAAA+B,OAAA,EAAb/B,aAAa,CAAAgC,IAAA;EAAAC,UAAA,EADA;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}